%{
#include "frontend.hpp"

extern int yylineno;
extern int yylex();
extern int yyerror(ir::solver *, const char *s);

static int nbc = 0;

#define SRC_LOC (*yacc::filename + ":" + std::to_string(yylineno));

#define EXPR_PTR(ptr)   std::shared_ptr<const ir::expr>((ptr))

%}

%parse-param {ir::solver *solver}

%union {
    int int_val;
    double real_val;
    std::string *str;
    ir::var_type type;

    ir::expr *expr;

    std::vector<std::shared_ptr<const ir::expr>> *expr_lst;
    std::vector<std::shared_ptr<const ir::identifier>> *id_lst;

    ir::equation *eq;
    ir::bc *bc;
    std::vector<std::shared_ptr<const ir::bc>> *bc_lst;
}

%token <real_val> REAL_VALUE
%token <int_val> INT_VALUE
%token <str> ID
%token <int_val>  KW_LOC
%token KW_VAR KW_LET 
%token KW_SIN KW_COS KW_DIV KW_GRAD KW_LAP
%token KW_BC KW_IC KW_EQ
%token KW_REAL KW_FIELD

%type <expr> expr factor unary_expr postfix_expr primary_expr
%type <id_lst> id_lst
%type <expr_lst> expr_lst
%type <type> type
%type <eq> equation
%type <bc> condition
%type <bc_lst> condition_block conditions condition_blocks

%%

problem
: variable_definitions declarations equations
| variable_definitions equations
;

variable_definitions
: variable_definition
| variable_definition variable_definitions
;

variable_definition
: KW_VAR type ':' id_lst    { for (auto id: *$4) {
                                  std::shared_ptr<ir::variable> var;
                                  var = std::make_shared<ir::variable>(id->name, $2);
                                  if (solver->addvar(var)) {
                                      std::string msg = "var "
                                        + id->name
                                        + " already defined";
                                      yyerror(solver, msg.c_str());
                                      YYABORT;
                                  }
                              }
                              delete $4; }
;

type
: KW_FIELD                  { $$ = ir::FIELD; }
| KW_REAL                   { $$ = ir::REAL; }
;

declarations
: declaration               { yyerror(solver, "declarations not yet implemented"); YYABORT; }
| declaration declarations  { yyerror(solver, "declarations not yet implemented"); YYABORT; }
;

declaration
: KW_LET ID '=' expr        { log::warn() << yacc::filename
                                 << ":" << yylineno
                                 << ": Definitions not yet implemented\n";
                              delete $4; }
;

expr
: expr '+' factor           { $$ = new ir::bin_expr(EXPR_PTR($1), '+', EXPR_PTR($3)); }
| expr '-' factor           { $$ = new ir::bin_expr(EXPR_PTR($1), '-', EXPR_PTR($3)); }
| factor                    { $$ = $1; }
;

factor
: factor '*' unary_expr     { $$ = new ir::bin_expr(EXPR_PTR($1), '*', EXPR_PTR($3)); }
| factor '/' unary_expr     { $$ = new ir::bin_expr(EXPR_PTR($1), '/', EXPR_PTR($3)); }
| unary_expr                { $$ = $1; }
;

unary_expr
: postfix_expr
| '-' unary_expr            { $$ = new ir::unary_expr('-', EXPR_PTR($2)); }
;

postfix_expr
: primary_expr          { $$ = $1; }
| KW_SIN '(' expr ')'   { $$ = new ir::func("sin", EXPR_PTR($3)); }
| KW_COS '(' expr ')'   { $$ = new ir::func("cos", EXPR_PTR($3)); }
| KW_DIV '(' expr ')'   { $$ = new ir::div_expr(EXPR_PTR($3)); }
| KW_GRAD '(' expr ')'  { $$ = new ir::grad_expr(EXPR_PTR($3)); }
| KW_LAP '(' expr ')'   { $$ = new ir::lap_expr(EXPR_PTR($3)); }
| ID '(' ')'            { $$ = new ir::func(*$1); }
| ID '(' expr_lst ')'   { if (*$1 == "d") {
                              if ($3->size() != 2) {
                                  yyerror(solver,
                                      "diff operator (d) requires exactly 2 arguments");
                                  YYABORT;
                              }
                              const ir::identifier *d_wrt_id =
                                  dynamic_cast<const ir::identifier *>((*$3)[1].get());
                              if (d_wrt_id == NULL) {
                                  yyerror(solver,
                                      "can only differentiate wrt a variables");
                                  YYABORT;
                              }
                              std::shared_ptr<const ir::identifier> did =
                                  std::make_shared<const ir::identifier>(d_wrt_id->name);
                              $$ = new ir::diff_expr($3->at(0), did); delete $3;
                          }
                          else {
                              $$ = new ir::func(*$1, *$3); delete $3; }
                        }
| ID '[' expr_lst ']'   { if ($3->size() != 1) {
                              yyerror(solver,
                                "multiple indices not yet implemented");
                              YYABORT;
                          }
                          $$ = new ir::field_value(*$1, (*$3)[0]); delete $3; }
;

expr_lst
: expr                      { $$ = new std::vector<std::shared_ptr<const ir::expr>>();
                              $$->push_back(EXPR_PTR($1)); }
| expr ',' expr_lst         { $$ = $3; $$->insert($$->begin(), EXPR_PTR($1)); }
;

primary_expr
: ID                        { $$ = new ir::identifier(*$1); }
| REAL_VALUE                { $$ = new ir::value($1); }
| INT_VALUE                 { $$ = new ir::value($1); }
| '(' expr ')'              { $$ = $2; }
;

id_lst
: ID                        { $$ = new std::vector<std::shared_ptr<const ir::identifier>>();
                              $$->push_back(std::make_shared<ir::identifier>(*$1)); }
| ID ',' id_lst             { $$ = $3; $$->insert($$->begin(), std::make_shared<ir::identifier>(*$1)); }
;

equations
: equation                  { solver->addeq(std::shared_ptr<const ir::equation>($1)); }
| equation equations        { solver->addeq(std::shared_ptr<const ir::equation>($1)); }
;

equation
: KW_EQ ID '{' expr '=' expr condition_blocks '}' { $$ = new ir::equation(
                                                        *$2,
                                                        EXPR_PTR($4),
                                                        EXPR_PTR($6));
                                                    for (auto c: *$7) $$->add_bc(c);
                                                    delete $7; }
| KW_EQ ID '{' expr '=' expr '}' { $$ = new ir::equation(
                                                        *$2,
                                                        EXPR_PTR($4),
                                                        EXPR_PTR($6)); }
;

condition_blocks
: condition_block                   { $$ = $1; }
| condition_block condition_blocks  { $$ = $1;
                                      for (auto c: *$2) $$->insert($$->begin(), c);
                                      delete $2; }
;

condition_block
: KW_IC '{' conditions '}'  { $$ = $3; }
| KW_BC '{' conditions '}'  { $$ = $3; }
;

conditions
: condition                 { $$ = new std::vector<std::shared_ptr<const ir::bc>>();
                              $$->push_back(std::shared_ptr<const ir::bc>($1)); }
| condition conditions      { $$ = $2; $$->push_back(std::shared_ptr<const ir::bc>($1)); }
;

condition
: '[' KW_LOC ']' expr '=' expr  { $$ = new ir::bc(
                                    std::make_shared<const ir::equation>("BC_" + std::to_string(nbc++),
                                        EXPR_PTR($4),
                                        EXPR_PTR($6)),
                                    $2); }
;

%%

int yyerror(ir::solver *sol, const char *s) {
    std::cerr
        << termcolor::bold
        << yacc::filename << ":" << yylineno
        << termcolor::reset
        << ": " 
        << termcolor::bold << termcolor::red
        << s
        << termcolor::reset
        << "\n";
    return 0;
}
